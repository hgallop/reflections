What happens when you initialize a repository? Why do you need to do it?

Initializing the repository adds the hidden .git file that allows you to begin
to make commits based on the changes that you make to a file. You can then
commit new changes with a message, track those changes through commit ids and
compare new and old versions of your file.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The working directory contains files that have been created but may not have
been committed. The repository holds already committed files in sequence of when
each commit or change was saved or committed to the repository. However, the
staging area acts as an intermediary between the two. The staging area gives one
the opportunity to reflect on the most logical separation of the commits and
which combinations of file changes should be grouped together for the easiest
comparison between file changes.

 How can you use the staging area to make sure you have one commit per logical
 change?

 The staging area allows the user to add files that they wish to commit while
 excluding those they do not. This allows the user to control the commit of file
changes to groups that logically connect while leaving off those that do not
logically connect to the change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Creating branches can be helpful for creating large changes, new versions, or
experimental features. It allows you to keep your existing master branch that is
a working copy of your files while making vast changes that are separate.

How do the diagrams help you visualize the branch structure?

Diagrams are a useful tool to logically follow the path that commits take. As
more and more branching is executed and more commits made to each branch, a
diagram will allow you to keep track of how to navigate between branches and
commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

When two branches are merged together all the changes (commits) for each branch
are combined in chronological order from the time that the branch from master
was created. It is represented by a branching diagram because it helps one to
visualize the path each branch traveled and shows where the paths reconnected to
form a single branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

Automatic merging is a time saving feature of git. If no conflicts are present
it quickly and easily merges the two branches. If you had to merge manually at
all times, you would get more control over the merged commits but it would be
time consuming to merge each change individually. 
